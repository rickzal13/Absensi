unit Unit13;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ExtCtrls, OoMisc, AdPort, pngimage, StdCtrls;

type
  TForm13 = class(TForm)
    Panel1: TPanel;
    ComboBox1: TComboBox;
    ComboBox2: TComboBox;
    Button1: TButton;
    Label1: TLabel;
    Label2: TLabel;
    Image1: TImage;
    ApdComPort1: TApdComPort;
    Timer3: TTimer;
    procedure Button1Click(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure ApdComPort1PortClose(Sender: TObject);
    procedure ApdComPort1PortOpen(Sender: TObject);
  private
    { Private declarations }
    Port_State: boolean;
    thedata: string;
    procedure EnumComPorts(Ports: TStrings);
    //procedure kopi;
  public
    { Public declarations }
  end;

var
  Form13: TForm13;
  xyz: integer;
  n, BAR: String;
implementation

{$R *.dfm}

procedure TForm13.ApdComPort1PortClose(Sender: TObject);
begin
    Port_State := False;
  Button1.Caption := 'DisConnect';
end;

procedure TForm13.Button1Click(Sender: TObject);
var
  ComNo: string;
begin
  if ComboBox1.ItemIndex = -1 then
  begin
    MessageBox(Handle, 'Please select a com', pchar(Application.Title),
      MB_OK or MB_ICONERROR);
    exit;
  end;
  ComNo := copy(ComboBox1.Text, 4, length(ComboBox1.Text) - 1);
  if not Port_State then
  begin
    with ApdComPort1 do
    begin
      Baud := StrToInt(ComboBox2.Text);
      ComNumber := StrToInt(ComNo);
      try
        Open := true;
      Except
        MessageBox(Handle, 'Can not open COM', pchar(Application.Title),
          MB_OK or MB_ICONERROR);
        exit;
      end;
    end;
  end
  else
  begin
    ApdComPort1.Open := false;
  end;
  Timer3.Enabled := true;

end;


procedure TForm13.ApdComPort1PortOpen(Sender: TObject);
begin
      Port_State := true;
  Button1.Caption := 'Connected';
end;


procedure TForm13.EnumComPorts(Ports: TStrings);
var
  KeyHandle: HKEY;
  ErrCode, Index: integer;
  ValueName, Data: string;
  ValueLen, DataLen, ValueType: DWORD;
  TmpPorts: TStringList;
begin
  ErrCode := RegOpenKeyEx(HKEY_LOCAL_MACHINE, 'HARDWARE\DEVICEMAP\SERIALCOMM',
    0, KEY_READ, KeyHandle);

  if ErrCode <> ERROR_SUCCESS then
  begin
    // raise EComPortExt.Create('EnumComPorts',CError_RegError, ErrCode);
    MessageBox(Handle, 'Registry error!!! alat belum terpasang',
      pchar(Application.Title), MB_OK or MB_ICONERROR);
    exit;
  end;
  TmpPorts := TStringList.Create;
  try
    Index := 0;
    repeat
      ValueLen := 256;
      DataLen := 256;
      SetLength(ValueName, ValueLen);
      SetLength(Data, DataLen);
      ErrCode := RegEnumValue(KeyHandle, Index, pchar(ValueName),
{$IFDEF DELPHI_4_OR_HIGHER}
        Cardinal(ValueLen),
{$ELSE}
        ValueLen,
{$ENDIF}
        nil, @ValueType, PByte(pchar(Data)), @DataLen);

      if ErrCode = ERROR_SUCCESS then
      begin
        SetLength(Data, DataLen);
        TmpPorts.Add(Data);
        Inc(Index);
      end
      else if ErrCode <> ERROR_NO_MORE_ITEMS then
        MessageBox(Handle,
          'Registry error!!! Mungkin Modem belum Terpasang... ', pchar
            (Application.Title), MB_OK or MB_ICONERROR);

    until (ErrCode <> ERROR_SUCCESS);

    TmpPorts.Sort;
    Ports.Assign(TmpPorts);
  finally
    RegCloseKey(KeyHandle);
    TmpPorts.Free;
  end;

end;
procedure TForm13.FormCreate(Sender: TObject);
begin
  xyz := 1;
  EnumComPorts(ComboBox1.Items);
  if ComboBox1.Items.Count > 0 then
    ComboBox1.ItemIndex := 0;
end;

end.
